{"version":3,"sources":["Theme.js","UtilComponents/CustomDivider.js","Home/Home.js","Api.js","UtilComponents/StatusBar.js","Admin/Login.js","UtilComponents/Routes.js","UtilComponents/MenuDrawer.js","UtilComponents/Navbar.js","UtilComponents/Footer.js","App.js","serviceWorker.js","index.js"],"names":["theme","useStyles","makeStyles","root","backgroundColor","CustomDivider","classes","Divider","variant","className","background","backgroundSize","color","textAlign","margin","minHeight","titleBar","backgroundAttachment","backgroundPosition","fontFamily","paddingTop","titleBarTitle","fontSize","titleBarText","fontStyle","marginTop","marginBottom","avatarImg","width","height","marginLeft","marginRight","borderStyle","borderWidth","borderColor","experienceBar","blogBar","padding","articleBar","homeImg","Home","Grid","container","justify","spacing","item","xl","lg","md","sm","xs","Paper","elevation","Avatar","alt","src","base","siteApiUrls","loginBase","addPost","updateBlog","getPost","getBlogTitles","getPosts","getArticle","addArticle","updateArticle","getArticleTitles","login","tokenAuth","StatusTypes","ApiUtils","url","json","options","method","body","JSON","stringify","headers","fetch","response","status","paper","StatusBar","props","hidden","colorScheme","text","undefined","warning","style","id","LoginLogic","document","getElementById","value","username","token","sessionStorage","setItem","password","sendPostRequest","data","Login","handleKeyPress","event","key","onSubmit","state","statusWarning","loginInfo","getUsernameAndPassword","sendRequest","then","request","checkLoginStatus","setState","setLoginSessionStorage","window","location","scrollTo","this","subroot","title","TextField","data-testid","label","inputs","autoFocus","type","onKeyDown","Button","buttons","onClick","React","Component","withStyles","Routes","loginPermission","checkLoginTime","getItem","res","catch","err","console","log","setTimeout","getTokenAuth","checkTokenAuth","path","list","itemHolder","listItem","MenuDrawer","useState","left","toggleDrawer","anchor","open","map","Fragment","IconButton","aria-label","edge","size","disableFocusRipple","SwipeableDrawer","onClose","onOpen","role","List","index","ListItem","button","component","RouterLink","to","toLowerCase","ListItemText","primary","disableTypography","navBar","artMenu","homeButton","StyledButton","border","StyledButtonGroup","ButtonGroup","Navbar","AppBar","position","Toolbar","Hidden","only","fullWidth","Footer","setValue","BottomNavigation","onChange","newValue","BottomNavigationAction","icon","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ef8dcbd9.chunk.js","sourcesContent":["import 'fontsource-press-start-2p';\nimport 'fontsource-bangers';\nimport 'roboto-fontface';\n\n\nconst whiteColor = \"#FFFFFF\";\nconst color1 = \"#01BAEF\";\nconst color2 =  \"#20BF55\";\nconst color3 =  \"#0B4F6C\";\nconst color5 =  \"#1c1d1f\";\n\n// const fontFamily1 = '\"Press Start 2P\"';\nconst fontFamily1 = '\"Bangers\"';\nconst fontFamily2 = '\"Roboto\"';\n\nexport let theme ={\n\n        // Backgrounds\n        background: \"url('./res/img/organCoastRocky2.jpg') fixed no-repeat\",\n        backgroundSize: \"100% 100%\",\n        mainPaperBackground: \"url('./res/img/organSunset.jpg') no-repeat\",\n        paperBackground: color1,\n        lightPaperBackground: color5,\n        navBarBackground: color1,\n        footerBackground: color3,\n        textFieldBackground: color5,\n        buttonBackground: color1,\n        buttonSecondaryBackground: color2,\n        buttonHoverBackground: color3,\n        drawerBackground: color2,\n        customCardBackground: \"rgba(0, 0, 0, 0.55)\",\n        statusBarBackground: color2,\n        error: \"#FF0000\",\n\n        // Image Border\n        imgBorderColor: color2,\n\n        // Text\n        titleFontFamily: fontFamily1,\n        titleTextColor: color1,\n        titleFontSize: \"170%\",\n\n        headerFontFamily: fontFamily1,\n        headerTextColor: color1,\n        header2TextColor: color2,\n\n\n        defaultTextColor: \"black\",\n        defaultLightTextColor: whiteColor,\n        defaultTextFontFamily: fontFamily2,\n\n        drawerTextColor: whiteColor,\n        drawerFontFamily: fontFamily1,\n\n        // Divider color\n        dividerColor: color3,\n\n        // Icon Colors\n        iconColor: whiteColor,\n\n        fullPage: 11,\n        mobileFullPage: 12,\n        halfPage: 5,\n        defaultHeight: \"840px\"\n\n\n\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {theme} from \"../Theme\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: theme.dividerColor,\n    },\n\n});\n\nexport default function CustomDivider() {\n    const classes = useStyles();\n    return (\n        <Divider variant={'middle'} className={classes.root}/>\n    );\n}\n","import React from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {theme} from \"../Theme\";\nimport \"fontsource-press-start-2p\";\nimport CustomDivider from \"../UtilComponents/CustomDivider\";\n\n/**\n * Home is the home page component to the onebadbyte website\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Home() {\n    const classes = useStyles();\n    return(\n        <Grid container justify={\"center\"} className={classes.root} spacing={0}>\n            {/* Title bar */}\n            <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\n                <Paper elevation={3} className={classes.titleBar}>\n                    <Avatar alt={\"avatar image\"} src={\"./res/img/profilePic.jpg\"} className={classes.avatarImg}/>\n                    <CustomDivider/>\n                </Paper>\n            </Grid>\n    </Grid>\n    );\n}\n\n/**\n * Css for the Home component\n * @type {(props?: any) => ClassNameMap<\"titleBarText\"|\"titleBar\"|\"homeImg\"|\"titleBarTitle\"|\"root\"|\"avatarImg\"|\"experienceBar\"|\"articleBar\"|\"blogBar\">}\n */\nconst useStyles = makeStyles((() => ({\n    root:{\n        background: \"#000000\",\n        backgroundSize: theme.backgroundSize,\n        color: theme.defaultTextColor,\n        textAlign: \"center\",\n        margin: \"0px\",\n        minHeight: theme.backgroundSize,\n    },\n\n    titleBar:{\n        textAlign: \"center\",\n        background: theme.mainPaperBackground,\n        backgroundSize: \"2000px 500px\",\n        backgroundAttachment: \"fixed\",\n        backgroundPosition: \"100% 0px\",\n        color: theme.titleTextColor,\n        fontFamily: theme.titleFontFamily,\n        paddingTop: \"1%\",\n        // paddingBottom: \"1%\",\n    },\n\n    titleBarTitle:{\n        color: theme.titleTextColor,\n        fontFamily: theme.titleFontFamily,\n        margin: \"0px\",\n        fontSize: \"200%\"\n    },\n\n    titleBarText:{\n        color: theme.defaultLightTextColor,\n        fontFamily: theme.defaultTextFontFamily,\n        fontStyle: \"bold\",\n        fontSize: \"100%\",\n        marginTop: \"0.5%\",\n        marginBottom: \"0.5%\",\n    },\n\n    avatarImg:{\n        width: \"250px\",\n        height: \"250px\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        marginTop: \"10px\",\n        borderStyle: \"solid\",\n        borderWidth: \"4px\",\n        borderColor: theme.imgBorderColor,\n    },\n\n    experienceBar: {\n        margin:\"0px\",\n    },\n\n    blogBar: {\n        background: theme.mainPaperBackground,\n        backgroundSize: \"2000px 500px\",\n        backgroundAttachment: \"fixed\",\n        backgroundPosition: \"100% 0px\",\n        margin:\"0px\",\n        padding: \"0px\"\n\n    },\n\n    articleBar: {\n        background: theme.mainPaperBackground,\n        backgroundSize: \"2000px 500px\",\n        backgroundAttachment: \"fixed\",\n        backgroundPosition: \"100% 0px\",\n        margin:\"0px\",\n        padding: \"0px\"\n\n    },\n\n    homeImg: {\n        width: \"100%\",\n        height: \"auto\",\n    },\n\n})));\n\n\nexport default Home;\n","\n// Used for local server\n// let base = \"http://localhost:8080/api\";\n// let loginBase = \"http://localhost:8080/login\";\n\n// Used for live server\nlet loginBase = \"https://onebadbyte.com/login\";\nlet base = \"https://onebadbyte.com/api\"\n\n/**\n * Used for all the urls in every request\n * @type {{getPosts: string, addArticle: string, updateArticle: string, getArticle: string, loginBase: string, tokenAuth: string, addPost: string, getArticleTitles: string, login: string}}\n */\nexport const siteApiUrls = {\n        loginBase: loginBase,\n        addPost: base + \"/addPost\",\n        updateBlog: base + \"/updateBlog/\",\n        getPost: base + \"/getPost/\",\n        getBlogTitles: base + \"/getBlogTitles\",\n        getPosts: base + \"/getPosts\",\n        getArticle: base + \"/getArticle/\",\n        addArticle: base + \"/addArticle\",\n        updateArticle: base + \"/updateArticle/\",\n        getArticleTitles: base + \"/getArticleTitles\",\n        login: base + \"/login\",\n        tokenAuth: base + \"/tokenAuth\"\n    }\n\n/**\n * Used for checking statues' from the server\n * @type {{SERVER_ERROR: number, OK: number, FORBIDDEN: number}}\n */\nexport const StatusTypes = {\n    OK: 200,\n    FORBIDDEN: 403,\n    SERVER_ERROR: 500,\n};\n\n\n/**\n * ApiUtils contains helper functions for all requests done on the website\n */\nexport class ApiUtils{\n\n    /**\n     * sendPostRequest sends a post request to the url provided with the json data provided\n     */\n    static async sendPostRequest(url, json){\n        const options = {\n            method: 'POST',\n            body: JSON.stringify(json),\n            headers:{\n                'Content-Type': 'application/json'\n            },\n        }\n        let response = await fetch(url, options);\n        return await response.json()\n    }\n\n    static async sendGetRequest(url){\n        const options = {\n            method: 'GET',\n            // body: JSON.stringify(json),\n            headers:{\n                'Content-Type': 'application/json'\n            },\n        }\n        let response = await fetch(url, options);\n        return await response.json()\n    }\n\n    /**\n     * checkLoginStatus checks the status from a login request\n      */\n    static checkLoginStatus(status){\n        if(status === 200){\n            return StatusTypes.OK;\n        }else if(status === 403){\n            return StatusTypes.FORBIDDEN;\n        }else{\n            return StatusTypes.SERVER_ERROR\n        }\n    }\n}\n","import Paper from \"@material-ui/core/Paper\";\nimport * as React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {theme} from \"../Theme\";\n\nconst useStyles = makeStyles({\n    root:{\n        margin: \"0px\",\n        padding: \"0px\",\n        height: \"auto\",\n\n    },\n\n    paper:{\n        background: theme.statusBarBackground,\n        textAlign: \"center\",\n        fontSize: \"100%\",\n        fontFamily: theme.defaultTextFontFamily,\n        color: theme.defaultLightTextColor,\n        marginBottom: \"1px\",\n        padding: \"0px\",\n        margin: \"0px\"\n        // height: \"50px\",\n    },\n})\n\nexport default function StatusBar(props){\n    const classes = useStyles();\n    let hidden = false;\n    let colorScheme = theme.statusBarBackground;\n    if(props.text === \"\" || props.text === undefined){\n        hidden = true;\n    }\n\n    if(props.warning) {\n        colorScheme = theme.error;\n    }\n    return(\n        <Paper elevation={3} hidden={hidden} className={classes.paper} style={{backgroundColor: colorScheme}} id={\"statusBar\"}>\n            <h1>{props.text}</h1>\n        </Paper>\n    )\n}\n\n","import Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {theme} from \"../Theme\";\nimport {withStyles} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport {ApiUtils, siteApiUrls} from \"../Api\";\nimport StatusBar from \"../UtilComponents/StatusBar\";\nimport {StatusTypes} from \"../Api\";\n\n/**\n * Author Brody Prestwich\n */\n\n/**\n * LoginLogic contains all the logic for the Login component\n */\nexport class LoginLogic {\n    /**\n     * returns the usename and password from the textboxs on the login page\n     * @returns {*[String, String]}\n     */\n    static getUsernameAndPassword() {\n        let username = document.getElementById(\"usernameInput\").value;\n        let password = document.getElementById(\"passwordInput\").value;\n        return [username, password];\n    }\n\n    static setLoginSessionStorage(username, token) {\n        sessionStorage.setItem(\"username\", username);\n        sessionStorage.setItem(\"token\", token);\n    }\n\n    static async sendRequest(username, password) {\n        return await ApiUtils.sendPostRequest(siteApiUrls.login, {\n            \"username\": username,\n            \"password\": password\n        })\n    }\n\n    static checkLoginStatus(data) {\n        if (data.status === 200) {\n            return StatusTypes.OK;\n        } else if (data.status === 403) {\n            return StatusTypes.FORBIDDEN;\n        } else {\n            return StatusTypes.SERVER_ERROR\n        }\n    }\n}\n\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {status: \"\", statusWarning: false}\n    }\n\n    onSubmit() {\n        const loginInfo = LoginLogic.getUsernameAndPassword();\n        LoginLogic.sendRequest(loginInfo[0], loginInfo[1])\n            .then(request => {\n                const status = LoginLogic.checkLoginStatus(request);\n                if (status === StatusTypes.OK) {\n                    this.setState({status: \"User successfully logged in!\", statusWarning: false})\n                    LoginLogic.setLoginSessionStorage(loginInfo[0], request.token)\n                    if (window.location === siteApiUrls.loginBase) {\n                        window.location = \"/admin\";\n                    }\n                } else if (status === StatusTypes.FORBIDDEN) {\n                    this.setState({status: `Username or password incorrect`, statusWarning: true})\n                } else {\n                    this.setState({status: `Internal Server Error ${request.status}`, statusWarning: true})\n                }\n            });\n        window.scrollTo(0, 0);\n    }\n\n    handleKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            this.onSubmit();\n        }\n    }\n\n    render() {\n        const {classes} = this.props;\n        return (\n            <Grid container justify={\"center\"} className={classes.root}>\n                <Grid item xl={8} lg={8} md={10} sm={10} xs={10} className={classes.subroot}>\n                    <br/>\n                    <br/>\n                    <StatusBar text={this.state.status} warning={this.state.statusWarning}/>\n                    <Paper elevation={3} className={classes.paper}>\n                        <h1 className={classes.title}>Login</h1>\n                        <TextField id={\"usernameInput\"} data-testid={\"usernameInput\"}\n                                   label={\"Login\"} variant={\"filled\"} className={classes.inputs} autoFocus={true}/>\n                        <br/>\n                        <TextField id={\"passwordInput\"} data-testid={\"passwordInput\"}\n                                   type={\"password\"} label={\"Password\"} variant={\"filled\"} className={classes.inputs}\n                                   onKeyDown={this.handleKeyPress}/>\n                        <Button id={\"loginButton\"} variant={\"contained\"}\n                                color={\"secondary\"} className={classes.buttons} onClick={() => this.onSubmit()}>Login\n                        </Button>\n                    </Paper>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\n/**\n * useStyles is used as the object for the css in the Login component\n * @returns {{buttons: {marginRight: string, backgroundColor: string, fontFamily: string, width: string, marginBottom: string, fontSize: string, \"&:hover\": {backgroundColor: string}, marginTop: string, marginLeft: string, height: string}, paper: {backgroundColor: string, margin: string, paddingTop: string}, inputs: {marginRight: string, backgroundColor: string, width: string, marginTop: string, marginLeft: string}, root: {minHeight: string, background: string, backgroundSize: string}, title: {fontFamily: string, color: string, textAlign: string, paddingTop: string}}}\n */\nconst useStyles = () => ({\n    root: {\n        background: theme.background,\n        backgroundSize: theme.backgroundSize,\n        minHeight: theme.defaultHeight,\n    },\n\n    title: {\n        fontFamily: theme.titleFontFamily,\n        textAlign: \"center\",\n        paddingTop: \"2%\",\n        color: theme.defaultLightTextColor,\n\n    },\n\n    paper: {\n        backgroundColor: theme.navBarBackground,\n        margin: \"0px\",\n        paddingTop: \"0px\"\n    },\n\n    inputs: {\n        backgroundColor: \"white\",\n        marginLeft: \"5%\",\n        marginRight: \"5%\",\n        marginTop: \"1%\",\n        width: \"90%\",\n    },\n\n    buttons: {\n        backgroundColor: theme.buttonSecondaryBackground,\n        marginTop: \"1%\",\n        marginLeft: \"5%\",\n        marginRight: \"5%\",\n        marginBottom: \"5%\",\n        width: \"90%\",\n        height: \"60px\",\n        fontFamily: theme.titleFontFamily,\n        fontSize: \"150%\",\n        \"&:hover\": {\n            backgroundColor: theme.buttonHoverBackground,\n        }\n    },\n});\n\n\nexport default withStyles(useStyles)(Login);\n\n","import {Route, Switch, useParams} from \"react-router-dom\";\nimport Home from \"../Home/Home\";\nimport React from \"react\";\nimport Login from \"../Admin/Login\";\nimport {siteApiUrls, StatusTypes} from \"../Api\";\n\n/**\n * Route component does all the routing for the single page application.\n */\nclass Routes extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            // Used to check if the users logged in\n            loginPermission: false,\n\n            // Used in the timer to check the users token\n            checkLoginTime: 500,\n        };\n    }\n\n    /**\n     * getTokenAuth sends a post request to the server getting a status code\n     * @returns {Promise<void>}\n     */\n    async getTokenAuth(){\n        let username = sessionStorage.getItem(\"username\");\n        let token = sessionStorage.getItem(\"token\");\n        if(username === null || token === null){\n            return;\n        }\n\n        const options = {\n            method: 'POST',\n            body: JSON.stringify(\n                {\n                    username: username,\n                    token: token,\n                }),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }\n\n        await fetch(siteApiUrls.tokenAuth, options)\n            .then(res => res.json())\n            .catch(err => console.log(err))\n            .then(res => {\n                if (res === StatusTypes.OK) {\n                    this.setState({loginPermission: true})\n                    this.setState({checkLoginTime: 60000})\n                } else {\n                    this.setState({loginPermission: false})\n                }\n                return res;\n            })\n    }\n\n    /**\n     * This function will constantly check if the user can token auth\n      */\n    checkTokenAuth(){\n        setTimeout(() => {\n            this.getTokenAuth().then();\n            this.checkTokenAuth();\n        }, this.state.checkLoginTime)\n    }\n\n    componentDidMount() {\n        // Starts the recursive checkTokenAuth fuction once the component mounts\n        this.checkTokenAuth();\n    }\n\n    render() {\n    return (\n        <Switch>\n            {/*Basic routes*/}\n\n            {/* blogWriter is used to write blog posts */}\n            {/*<PrivateRoute path={\"/blogWriter\"}*/}\n            {/*              component={<Writer url={siteApiUrls.addPost} component={BlogSection}/>}*/}\n            {/*              loginPermission={this.state.loginPermission}*/}\n            {/*/>*/}\n\n            {/*/!* articleWriter is used to write articles *!/*/}\n            {/*<PrivateRoute path={\"/articleWriter\"}*/}\n            {/*              component={<Writer url={siteApiUrls.addArticle} component={ArticleSection}/>}*/}\n            {/*              loginPermission={this.state.loginPermission}*/}\n            {/*/>*/}\n\n            {/*/!* updateArticle is used to update articles *!/*/}\n            {/*<PrivateRoute path={\"/updateArticle/:id\"}*/}\n            {/*              component={*/}\n            {/*                  <InjectDataToWriter*/}\n            {/*                      getData={siteApiUrls.getArticle}*/}\n            {/*                      url={siteApiUrls.updateArticle}*/}\n            {/*                  />}*/}\n            {/*              loginPermission={this.state.loginPermission}*/}\n            {/*/>*/}\n\n            {/*<PrivateRoute path={\"/updateBlog/:id\"}*/}\n            {/*              component={*/}\n            {/*                  <InjectDataToWriter*/}\n            {/*                      getData={siteApiUrls.getPost}*/}\n            {/*                      url={siteApiUrls.updateBlog}*/}\n            {/*                  />}*/}\n            {/*              loginPermission={this.state.loginPermission}*/}\n            {/*/>*/}\n\n            {/*<PrivateRoute path={\"/admin\"}*/}\n            {/*              component={*/}\n            {/*                  <Admin/>*/}\n            {/*              }*/}\n            {/*              loginPermission={this.state.loginPermission}*/}\n            {/*/>*/}\n\n            {/*<Route path={\"/login\"}><Login/></Route>*/}\n            <Route path={\"/\"}><Home/></Route>\n        </Switch>\n    );\n}\n}\n\n/**\n * PrivateRoute components won't let unauthorized users access the components provided\n */\nfunction PrivateRoute(props) {\n    if (props.loginPermission) {\n        return (\n            <Route path={props.path}>{props.component}</Route>\n        )\n    } else {\n        return (\n            <Login/>\n        )\n    }\n}\n\n\n/**\n * Logout clears the users sessionStorage which removes their token and returns them to the home page\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Logout(){\n    sessionStorage.clear();\n    return(\n        <Home/>\n    )\n}\n\n\n\nexport default Routes;\n\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {\n    Link as RouterLink,\n} from \"react-router-dom\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {theme} from \"../Theme\";\n\nconst useStyles = makeStyles({\n   root:{\n        width: \"0px\",\n       background: theme.drawerBackground,\n       fontFamily: theme.drawerFontFamily,\n       color: theme.drawerTextColor,\n   },\n\n    list: {\n        width: \"350px\",\n        backgroundColor: theme.paperBackground,\n        height:\"100%\",\n    },\n\n    itemHolder:{\n       backgroundColor: theme.paperBackground,\n        fontFamily: theme.drawerFontFamily,\n        color: theme.drawerTextColor,\n\n    },\n\n    listItem:{\n        fontFamily: theme.drawerFontFamily,\n        color: theme.drawerTextColor,\n        textAlign: \"center\",\n        fontSize: \"170%\",\n    },\n});\n\nexport default function MenuDrawer() {\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        left: false,\n    });\n\n    const toggleDrawer = (anchor, open) => (event) => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n\n        setState({ ...state, [anchor]: open });\n    };\n\n    const list = (anchor) => (\n        <div\n            className={classes.list}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n\n        >\n                <List>\n                    {['Home','Blog', 'Projects', 'About', 'Photography', 'Articles', 'Drawings'].map((text, index) => (\n                        <ListItem button key={text} component={RouterLink} to={text.toLowerCase()} className={classes.itemHolder}>\n                            <ListItemText primary={text} className={classes.listItem} disableTypography={true}/>\n                        </ListItem>\n                    ))}\n                </List>\n\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            {['left'].map((anchor) => (\n                <React.Fragment key={anchor}>\n                    <IconButton color=\"inherit\" aria-label=\"menu\" edge={\"start\"} size={\"medium\"} disableFocusRipple={true}>\n                        <MenuIcon onClick={toggleDrawer(anchor, true)}/>\n                    </IconButton>\n                    <SwipeableDrawer\n                        anchor={anchor}\n                        open={state[anchor]}\n                        onClose={toggleDrawer(anchor, false)}\n                        onOpen={toggleDrawer(anchor, true)}\n                    >\n                        {list(anchor)}\n                    </SwipeableDrawer>\n                    {/*<Routes/>*/}\n                </React.Fragment>\n            ))}\n        </div>\n    );\n}\n","import React from 'react';\nimport 'fontsource-press-start-2p';\nimport AppBar from '@material-ui/core/AppBar';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport {\n    BrowserRouter as Router,\n    Link as RouterLink,\n} from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport {withStyles} from \"@material-ui/core/styles\";\nimport Routes from \"./Routes\";\nimport {theme} from \"../Theme.js\";\nimport MenuDrawer from \"./MenuDrawer\";\n\nconst useStyles = makeStyles(() => ({\n    root: {\n    },\n\n    navBar: {\n        backgroundColor: theme.navBarBackground,\n        color: theme.defaultTextColor,\n    },\n\n    button:{\n        fontFamily: theme.titleFontFamily,\n        color: theme.defaultLightTextColor,\n    },\n\n    artMenu:{\n        textAlign: \"center\",\n        \"& div\": {\n            background: theme.navBarBackground,\n            textAlign: \"center\",\n        },\n    },\n\n    homeButton: {\n        background: \"url('./res/img/onebadbyte.png') center center no-repeat\",\n        width: \"100%\",\n        height: \"60px\"\n    },\n\n}));\n\nconst StyledButton = withStyles({\n    root:{\n        fontFamily: theme.titleFontFamily,\n        color: theme.defaultLightTextColor,\n        fontSize: theme.titleFontSize,\n        border: \"none\",\n        \"&:hover\": {\n            background: theme.buttonHoverBackground,\n        }\n    },\n})(Button);\n\nconst StyledButtonGroup = withStyles({\n    root:{\n        backgroundColor: theme.buttonBackground,\n    }\n})(ButtonGroup);\n\n\n\nexport default function Navbar() {\n    const classes = useStyles();\n    return (\n                <Grid container className={classes.root}>\n                        <Router>\n                                <AppBar position=\"sticky\" className={classes.navBar}>\n                                    <Toolbar>\n                                        <Grid item xl={1} lg={1} md={1} sm={1} xs={2}>\n                                            <MenuDrawer/>\n                                        </Grid>\n\n                                        {/*Home button*/}\n                                        <Grid item xl={2} lg={2} md={3} sm={4} xs={10}>\n                                            <Button color={\"inherit\"} component={RouterLink}\n                                                    to={\"/\"} variant={\"text\"} className={classes.homeButton}>\n                                            </Button>\n                                        </Grid>\n                                        <Hidden only={\"xs\"}>\n                                            {/*Spacing between buttons*/}\n                                            <Grid item xl={5} lg={5} md={3} sm={0}/>\n\n                                            {/*Button groups*/}\n                                            <Grid item xl={4} lg={4} md={5} sm={7}>\n                                                <StyledButtonGroup size={\"large\"}  variant={\"outlined\"} fullWidth={true}>\n                                                    <StyledButton fullWidth={true} component={RouterLink} to={\"/about\"}>About</StyledButton>\n                                                    <StyledButton fullWidth={true} component={RouterLink} to={\"/login\"}>Login</StyledButton>\n                                                </StyledButtonGroup>\n                                            </Grid>\n                                        </Hidden>\n                                    </Toolbar>\n                            </AppBar>\n                            <Routes/>\n                        </Router>\n                </Grid>\n\n    );\n}\n","import * as React from \"react\";\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {theme} from \"../Theme\";\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: theme.footerBackground,\n        color: theme.defaultTextColor,\n        height: \"60px\",\n        position: \"absolute\",\n        width: \"100%\",\n    },\n});\n\nexport default function Footer() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState();\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n        switch (newValue) {\n            case \"github\":\n                window.open(\"https://www.github.com/blackdartq\");\n                break;\n            case \"linkedin\":\n                window.open(\"https://www.linkedin.com/in/brody-prestwich/\");\n                break;\n            case \"email\":\n                window.open(\"mailto:brody.prestwich18@gmail.com\");\n                break;\n            default:\n                break;\n\n        }\n    };\n   return(\n       <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\n           <BottomNavigationAction label=\"Github\" value=\"github\" icon={<GitHubIcon fontSize={\"large\"} style={{color: theme.iconColor}} />} />\n           <BottomNavigationAction label=\"Linkedin\" value=\"linkedin\" icon={<LinkedInIcon fontSize={\"large\"} style={{color: theme.iconColor}} />} />\n           <BottomNavigationAction label=\"Email\" value=\"email\" icon={<MailOutlineIcon fontSize={\"large\"} style={{color: theme.iconColor}} />} />\n       </BottomNavigation>\n   );\n}\n\n","import React from 'react';\nimport Navbar from './UtilComponents/Navbar.js'\nimport Footer from './UtilComponents/Footer.js'\n\n\nfunction App() {\n  return (\n      <>\n        <Navbar/>\n        <Footer/>\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}